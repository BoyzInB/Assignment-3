/*
 *				solvers: main.c
 *
 *	This program solves Laplace's equation on the unit square in
 *	finite-difference form using Jacobi, Gauss-Seidel, or SOR iteration,
 *	or a full-matrix or banded-matrix direct solve.
 *
 *	The BCs are Dirichlet with u(B) = 0 except u(x = 1, y) = 1.
 *
 *	In u(x_i,y_j) = u_ij = u[j][i], x[i] runs from xmin to xmax & y[j] runs
 *	from ymin to ymax:
 *		x = xmin + i*dx;
 *		y = ymin + j*dy;
 */

#include <stdio.h>
#include <math.h>
#include <stdlib.h> 
#include <string.h> 

#define MAX_SWEEPS	1000000
 
#define PI	3.142
#define DOUBLE		((unsigned) sizeof(double))
#define ERROR	(-1)
#define sq(x)	( (x)*(x) )
#define f(x)	(sin(2*PI*x))
#define EPSILON_M	2.2204460492503131e-16

typedef struct {
    int N;
    double dx, xmin, xmax;
    double dy, ymin, ymax;
    double h;
    double omega, EPSILON;
} GRID;

typedef void	*POINTER;

void implement_BCs(GRID *grid, double *u[]);
void print_solution(char *string, GRID *grid, double *u[]);
void SOR(GRID *grid, double *u[]); 

int main(void)
{
    GRID grid;
    double xmin = 0., xmax = 1.;
    double ymin = 0., ymax = 1.;
    double h, mu;
    /* for convergence of iterative methods, EPSILON = epsilon*h^2 */
    double epsilon = 1.e-5;
    int N,i;  
    char c[100]; 
    
    N = 10;
    printf("number of dx = number of dy = %d\n", N);
    printf("number of dx = number of dy = %f\n", f(0.2));
    
    //Define our grid-dimensions
    grid.N = N;
    grid.dx = (xmax-xmin)/N;
    grid.dy = (ymax-ymin)/N;
    h = grid.h = grid.dx;
    grid.xmin = xmin;
    grid.xmax = xmax;
    grid.ymin = ymin;
    grid.ymax = ymax;
    grid.EPSILON = epsilon*sq(h);
     
    grid.omega = 1.7;
    
    /* allocate memory for array u */
    double **u = calloc((N+1),sizeof(*u));
    double *arr = calloc((N+1)*(N+1), sizeof*arr); 
	
    for (i = 0; i < (N+1); ++i){
	u[i] = &arr[i * (N+1)];
    }
    
    implement_BCs(&grid, u);
    SOR(&grid, u);
    print_solution("solution", &grid, u);  
    	
    free(arr);		
    free(u); 
    return 0;
}

void implement_BCs(GRID *grid, double *u[])
{
    int N = grid->N, i, j;
    
    for (j = 0; j <= N; j++) {
        u[j][0] = 0.;
        u[j][N] = 1.;
    }
    for (i = 1; i < N; i++) {
        u[0][i] = 0.;
        u[N][i] = 0.;
    }
}

void print_solution(char *string, GRID *grid, double *u[])
{
    int N = grid->N, i, j;
    double x, y; 
    
    // x, y, u
    for (i = 0; i <= N; i++) {
        for (j = 0; j <= N; j++) {
            printf("%.2f ", u[j][i]);
        }
        printf("\n");
    }
     
}


//Method fÃ¶r att performa SORen
void SOR(GRID *grid, double *u[])
{
    int N = grid->N, i, j, sweep;
    double EPSILON = grid->EPSILON;
    double omega = grid->omega;
    double sum, residual, norm_residual0, norm_residual = 1.;
    
    sum = 0;
    for (i = 1; i < N; i++) {
        for (j = 1; j < N; j++) {
            residual = (-4.*u[j][i]+u[j+1][i]+u[j-1][i]+
                        u[j][i+1]+u[j][i-1]);
            sum += fabs(residual);
        }
    }
    norm_residual0 = sum/sq(N-1);
    
    for (sweep = 0; sweep<MAX_SWEEPS &&
         norm_residual>EPSILON*norm_residual0; sweep++) {
        sum = 0;
        for (i = 1; i < N; i++) {
            for (j = 1; j < N; j++) {
                residual = (-4.*u[j][i]+u[j+1][i]+u[j-1][i]+
                            u[j][i+1]+u[j][i-1]);
                sum += fabs(residual);
                u[j][i] += omega*residual/4.;
            }
        }
        norm_residual = sum/sq(N-1);
    }
    printf("number of sweeps = %d\n", sweep);
    printf("norm_residual/norm_residual0 = %g\n",
           norm_residual/norm_residual0);
    if (norm_residual > EPSILON*norm_residual0)
        printf("WARNING: iterative method failed to converge\n");
}
